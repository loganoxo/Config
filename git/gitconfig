# Put this in your ~/.gitconfig or ~/.config/git/config
# Windows users: "~" is your profile's home directory, e.g. C:\Users\<YourName>
[user]
	name = loganoxo@163.com
	email = loganoxo@163.com
[core]
	# Global ignore file
	excludesfile = /Users/logan/.gitignore_global
	# 默认编辑器,许多 Git 命令会启动文本编辑器以提示进一步输入
	# on Windows if you may have Notepad++
	# editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin
	# Sublime Text (Mac)            editor = subl -n -w
	# VSCode                        editor = code --wait
	# Sublime Text (Win, 32-bit)    editor = c:/program files (x86)/sublime text 3/sublimetext.exe -w
	# Sublime Text (Win, 64-bit)    editor = c:/program files/sublime text 3/sublimetext.exe -w
	# 配置为vim
	editor = vim
	# windows系统需要设为true(默认),Git可以在你commit时自动地把行结束符CRLF转换成LF,而在checkout时把LF转换成CRLF
	# mac/linux 系统需要设为input(默认为false),checkout的时候不变,commit的时候转为LF(兜底)
	autocrlf = input
	# 默认是less,这里改成cat,让git输出不分页
	pager = cat
	# whitespace是一个 逗号分隔的列表,用于告诉 Git 识别哪些空白字符问题;
	# 这些设置会影响git diff(配合 color.diff.whitespace 高亮); git apply --whitespace=error(作为错误拒绝打补丁)
	# 若首个单词为fix,表示在 apply 或 commit 时自动修复可识别的空白错误
	# 可以使用 - 前缀禁用某项,比如 -trailing-space 表示不检查行尾空格
	# blank-at-eol(默认开启): 检查行尾的空格(\n 前有空格)是否为错误; blank-at-eof(默认开启):检查文件结尾是否有多余空行
	# trailing-space(默认开启):是 blank-at-eol 和 blank-at-eof 的简写(同时启用); space-before-tab(默认开启):检查缩进开头中 Tab 前是否有空格,视为格式错误
	# indent-with-non-tab(未开启):检查缩进是否用了空格而不是 Tab(启用时推荐用于强制 Tab 风格)
	# tab-in-indent(未开启):检查缩进是否包含 Tab,强制使用空格缩进时可启用
	# cr-at-eol(未开启):支持 CR(\r)结尾的行,不会触发 trailing-space 错误(用于 Windows 换行)
	# tabwidth=<n>(未开启):设置 Tab 显示宽度(影响缩进检测),默认 8,支持 1~63
	whitespace = -trailing-space,space-before-tab,-indent-with-non-tab,tab-in-indent,-cr-at-eol
# 设置 Git 使用 macOS 的 Keychain 存储密码或token
[credential]
	helper = osxkeychain
[init]
	# 仓库初始化默认分支设置为 master
	defaultBranch = master
[commit]
	template = ~/.stCommitMsg
[push]
	# 自动为新分支设置上游远程分支
	autoSetupRemote = true
	# 推送时同时推送相关 tag
	followTags = true
[fetch]
	# fetch 时删除已经在远程不存在的远程分支引用
	prune = true
	# 同样删除远程已移除的 tag
	pruneTags = true
	# 获取所有远程而非默认远程
	all = true
	# 默认值,仅在主项目引用的提交中包含子模块变更时才抓取子模块
	recurseSubmodules = on-demand
[branch]
	# 按最后提交时间倒序排序分支列表(最新提交在前),默认是按分支名字母顺序 正序排列;相当于 git branch --sort=-committerdate ; 短横线表示倒序
	sort = -committerdate
[tag]
	# 标签按版本号排序,优先级:语义版本; 在执行 git tag 时,按语义版本号排序标签列表(而不是默认的字母序)
	sort = version:refname
[status]
	# 显示子模块变更摘要
	submoduleSummary = true
	# 递归显示所有未跟踪文件
	showUntrackedFiles = all
[alias]
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all
	last = log -1
	# List available aliases
	aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
	# Remove file(s) from Git but not from disk
	untrack = rm --cache --
[diff]
	# 使得 git diff、git status 等命令在检测文件变化时,自动识别重命名(rename),否则默认只看新增和删除,重命名会被当作删除+新增;
	renames = true
	# Git 会根据 diff 场景使用更有意义的前缀;默认用 a/(原文件)和 b/(新文件)前缀;启用后,c/:表示当前索引(cached),i/:表示工作区中的文件(index),w/:表示工作区改动(working tree)
	mnemonicPrefix = true
	# 指定默认 diff 工具为 vscode,只在时用 git difftool 时生效(不用加-t了); git diff 还是默认的Git 内置的命令行 diff 引擎
	tool = vscode
[merge]
	# 设置默认合并工具为 vscode,只在时用 git mergetool 时生效(不用加-t了); git merge 还是默认的Git 内置的命令行 merge 引擎
	tool = vscode
	# 显示 base 源(common ancestor)方便比对
	conflictstyle = diff3
[column]
	# 自动启用列显示,适应终端宽度,让输出更整洁; 假如有很多个branch,默认git branch会在一列,分多行,列出所有分支(每行一个);
	# 使用auto后,每行会自动输出多个分支适应终端宽度
	ui = auto
[web]
	# 指定 Git 在需要打开网页时使用的浏览器(比如 git help --web、git instaweb)
	browser = google-chrome
# 可选:将 https 自动替换成 ssh 协议进行 clone/push/pull; 对于sourcetree、idea 等软件同样适用
[url "git@github.com:"]
	insteadOf = https://github.com/
[color]
	# auto/true根据当前环境自动决定是否启用颜色输出,如果输出是终端(tty),就启用颜色;如果输出被重定向(比如管道或写入文件),则关闭颜色,避免乱码
	# always : 强制始终使用颜色输出; 测试: git diff 和 git diff | less
	ui = auto
[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold
[color "diff"]
	# diff 元信息(如 "diff --git a/...")
	meta = yellow bold
	# 片段标识(如 "@@ -1,3 +1,4 @@")
	frag = magenta bold
	# 删除的行(以 - 开头)
	old = red bold
	# 新增的行(以 + 开头)
	new = green bold
	# 检测到多余空白的字符,用红色反色显示(背景为红色,文字为默认终端前景色,相当于高亮整段)
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[difftool]
	# 不提示确认,直接打开对比工具; 或者用 git difftool -y
	prompt = false
[mergetool]
	# 不保留 .orig 文件;执行合并后,带有冲突标记的原始文件可以保存为扩展名为 `.orig` 的文件;如果此变量设置为 false,则该文件不会被保留;默认为 true(即保留备份文件);
	keepBackup = false
	# 合并工具完成后删除临时文件
	keepTemporaries = false
	# 临时文件写入独立目录
	writeToTemp = true
	prompt = true
[difftool "vscode"]
	# 配置 vscode diff 命令,$LOCAL 和 $REMOTE 为 git 提供的比较文件路径
	cmd = code --wait --diff "$LOCAL" "$REMOTE"
[mergetool "vscode"]
	# VS Code 打开合并结果文件,等待关闭后继续
	cmd = code --wait "$MERGED"
	# 忽略 VS Code 的退出码,避免非 0 导致 Git 停止流程
	trustExitCode = true
# sourcetree自动创建的, 这里只是定义了两个sourcetree的工具名,但是默认不是使用这个的;
# 除非在命令行加上 -t,如: git mergetool -t sourcetree; 或者 git config --global diff.tool
[difftool "sourcetree"]
	# 指定用 macOS 自带的 opendiff(XCode软件提供的) 工具比较两个文件的差异,我用不了,因为电脑使用的commandlinetool是自己安装的,没有使用XCode提供的,所以不能使用
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	# 可用于指定工具路径,这里留空表示使用系统 PATH 中的 opendiff
	path = 
[mergetool "sourcetree"]
	# 调用 Sourcetree 自带脚本使用 FileMerge 进行三方合并
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	# Git 会根据退出码判断合并是否成功(true 表示信任)
	trustExitCode = true
