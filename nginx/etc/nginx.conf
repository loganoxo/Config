# 运行用户
# user  nginx;

#启动进程; auto: 会设置成cpu的核心数
worker_processes  1;

error_log  /Users/logan/Logs/nginx/error.log; #默认的error级别,只记录错误信息及更高级别的信息
error_log  /Users/logan/Logs/nginx/error.log  notice; #记录的是较为普通的运行信息,记录一些常规事件和系统状态
#error_log  /Users/logan/Logs/nginx/error.log  info; #记录较为详细的信息,比 notice 级别更为详细,适合于调试和监控

pid        /Users/logan/Logs/nginx/nginx.pid;

#工作模式及连接数上限
events    {
    worker_connections  256; #单个后台worker process进程的最大并发链接数,设为1024;mac上最大256
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http    {
    #设定mime类型(邮件支持类型),类型由mime.types文件定义
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /Users/logan/Logs/nginx/access.log  main;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    # 必须设为 on,如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime。
    sendfile        on;
    #tcp_nopush     on;

    #连接超时时间
    keepalive_timeout  65;

    gzip on; #开启gzip压缩
    gzip_min_length 1k; #设置对数据启用压缩的最少字节数
    gzip_buffers    4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 4; #设置数据的压缩等级,等级为1-9，压缩比从小到大
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml; #设置需要压缩的数据格式
    gzip_vary on;

    ####################################################################################

    # 这个server可以拒绝:未配置的域名+localhost+局域网ip+127.0.0.1的访问(8080端口)
    server    {
        listen 8080 default_server;
        server_name _; # 匹配所有没有匹配到 server_name 的请求
        # 拒绝所有未配置的域名+localhost+局域网ip+127.0.0.1的访问
        return 403;
    }

    # 这个server可以: 允许本机使用局域网IP+127.0.0.1+localhost访问
    # $remote_addr:这是指客户端(即发起请求的用户)的 IP 地址
    # $server_addr:指 Nginx 服务器的 IP 地址,即 Nginx 服务器监听的地址(为局域网ip或127.0.0.1,取决于访问用的是ip还是域名)
    server    {
        listen 8080;
        server_name localhost 127.0.0.1 192.168.0.101;
        charset utf-8;
        default_type text/plain;
        #access_log  logs/host.access.log  main;

        # 第一种方式;缺点不能使用return(包括location中的);return会一直通过;但是可以用location
        #        allow 127.0.0.1;     #允许本机用户通过127.0.0.1或localhost访问
        #        allow 192.168.0.101; #允许本机用户通过局域网ip访问
        #        deny all; #拒绝所有其他访问

        # 第二种方式,可以用return
        set $allow_access 0; #0为拒绝;1为通过
        # 检查是否为本机用户通过127.0.0.1或localhost访问
        if ($remote_addr = "127.0.0.1")    {
            set $allow_access 1;
        }

        # 检查是否为本机用户通过局域网ip访问
        if ($remote_addr = "192.168.0.101")    {
            set $allow_access 1;
        }

        if ($allow_access = 0)    {
            return 403;
        }
        location /    {
            #确定根目录,html是相对于nginx的执行文件的目录;即/opt/homebrew/Cellar/nginx/1.27.3/html;这个目录被homebrew软链接到/opt/homebrew/var/www,我又把Data/Config/nginx/www软链接到了这个目录,所以这里的html实际上就是www
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html    {
            root   html;
        }
    }
    include servers/*.conf;
}
