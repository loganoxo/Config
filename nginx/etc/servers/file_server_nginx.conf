server {
    listen       18001 ;
    #server_name  logan.file.vip; #服务域名,可以有多个,用空格隔开
    charset utf-8;

    ##################### 以下指令可以使用在 http server location 模块中 #####################

    # 控制 Nginx 是否使用操作系统内核提供的 sendfile(zero copy) 系统调用,以更高效地传输文件数据
    # 传统方式:不使用 sendfile 时,Nginx 会通过两个步骤处理文件传输:
    #       1、从磁盘读取文件内容到用户空间(内存缓冲区)
    #       2、将数据从用户空间写入网络套接字发送给客户端
    #       这种方式需要在内核空间和用户空间之间多次拷贝数据,增加了 CPU 和内存的消耗
    # sendfile 的方式:
    #       启用 sendfile 后,数据直接从磁盘读取并发送到网络套接字,完全在内核空间中完成
    #       sendfile 使用操作系统的 页缓存(Page Cache) 来缓存磁盘文件数据, 数据从磁盘读取后直接存放在内核页缓存中
    #       避免了用户空间和内核空间的多次数据拷贝,显著提高文件传输性能
    # 适用场景: 适用于小文件的传输
    #       静态文件传输:例如 HTML 文件、CSS 文件、JavaScript 文件、图片等
    #       高并发场景:减少内存拷贝和上下文切换,降低 CPU 占用率
    # 不适用场景:
    #       不适合大文件传输,大文件可能导致页缓存压力,引发性能下降
    #       不适用于需要对文件内容进行动态处理的场景
    #       如果需要对传输的数据进行额外的处理(例如压缩、过滤),则 sendfile 可能无法工作,因为数据需要进入用户空间进行处理
    sendfile on;
    # 限制每次调用 sendfile 传输的最大数据块大小,以便其他请求有机会被处理,防止一个请求独占 CPU 时间
    # 如果文件较大, Nginx 会分多次调用 sendfile 来完成传输
    # 在版本1.21.4之前 默认没有限制,之后默认为 2m
    sendfile_max_chunk 2m;

    # 一个http连接会使用单独的一个tcp连接, 但是这个tcp连接可能会多次传输数据, 每次传输数据的大小为 tcp窗口
    # 每次tcp客户端确认后, 会自动根据网络延迟等调整tcp的窗口大小, 即滑动窗口

    # 仅在使用sendfile时才能启用这个选项; 提高通过 sendfile 发送大文件时的效率, 控制 TCP 包的发送行为,尽量让数据包的传输更加高效
    # 启用它之后, 数据包会累计到一定大小(TCP窗口)之后才会发送,减小了额外开销,提高网络效率
    # 对于大文件, 如果不开启tcp_nopush, 一旦有数据准备好就会发送, 不会等到填满 tcp窗口大小, 会导致更多的网络开销, 发送了很多次小数据包
    tcp_nopush on;

    # 主要用于关闭 Nagle 算法, 让小数据包立即发送, 而不是等待数据累积到一定大小(TCP窗口)
    # 默认情况下, Nagle 算法会将多个小包缓冲后一次性发送, 适用于大数据传输, 但会导致小数据包的发送延迟
    # 适用于 低延迟场景, 可以立即将数据发送给客户端, 避免等待
    # 当连接进入 Keep-Alive 状态时,Nginx 会自动启用 TCP_NODELAY,确保小数据包(例如 HTTP 响应头或心跳包)能够快速发送
    # 在使用 SSL/TLS 加密 、无缓冲代理(Unbuffered Proxying)、WebSocket 代理  的连接上,TCP_NODELAY 也会启用,以避免小数据包的发送延迟
    # 可以与 tcp_nopush 一起使用, 最终的效果是先填满包, 再尽快发送, 对于最后一个数据包则立即发送
    tcp_nodelay on;

    # 默认情况下, Nginx 的文件 I/O 操作是同步阻塞的, 这意味着当 Nginx 读取文件时, 工作线程会被阻塞, 直到文件读取完成
    # 启用 aio 后, 文件读取会变成异步操作, Nginx 不需要等待文件读取完成, 可以继续处理其他请求, 从而提高吞吐量
    # 件读取请求会提交到操作系统, 后台异步完成, 使用事件轮询, 在读取完成后会收到通知
    # aio on | off | threads[=pool]; 因为mac中使用的事件模型为kqueue,不支持aio on
    # 在mac中可以使用线程池来模拟异步文件io,即: aio threads, 默认使用的线程池为 nginx自动创建的default
    # 在 main模块中设置: thread_pool test threads=32 max_queue=65536; 然后设置 aio threads=test; 可以使用自定义的线程池
    # 若要使用线程池的功能, 需要在编译时, 加上: --with-threads
    # aio on;

    # 指定 Nginx 使用 Direct I/O 来读取文件,绕过操作系统的页缓存,直接从磁盘读取数据;这对于非常大的文件(如视频或大文件下载)可以避免对内存的过度消耗
    # 当 sendfile 和 directio 同时启用时, 当文件大于等于directio 配置的阈值时,则启用 Direct I/O,同时会禁用 sendfile;
    # 如果文件小于 directio 配置的阈值, 则使用 sendfile;
    # Direct I/O 往往需要配合 aio(异步 I/O)一起使用,否则性能可能会受限:
    #   Direct I/O 绕过了操作系统的页缓存,直接从磁盘读取文件,虽然节省了内存,但 Direct I/O 是同步阻塞的,这意味着在读取或写入数据时,Nginx 的工作线程会等待磁盘 I/O 操作完成,造成性能瓶颈
    #   aio threads 可以解决 Direct I/O 的同步阻塞问题,通过启用异步 I/O,Direct I/O 的操作会交由后台线程处理,Nginx 的 worker 线程不必等待磁盘 I/O 的完成,从而避免了阻塞
    #   由于 Direct I/O 是同步阻塞的,单纯使用 aio on 依赖于操作系统的异步 I/O 支持,存在一定的兼容性和性能风险;
    #   推荐在生产环境中使用 directio 配合 aio threads,以获得更稳定的性能和更广泛的兼容性
    directio 10m;

    # Direct I/O 要求读取的数据必须与硬件的对齐要求一致, 通常的默认值是 512 字节,这通常适用于大多数硬盘的逻辑扇区大小
    # 如果在 Linux 上使用的是 XFS 文件系统, 由于其块对齐特性和优化逻辑,建议将 directio_alignment 增加到 4K(4096 字节);这是因为 XFS 通常使用 4K 或更大的块大小作为基本对齐单位
    # 在 macOS 中,directio_alignment 的设置一般无需特别调整,APFS 的默认块大小通常是 4KB,但 macOS 的 I/O 子系统和文件系统会自动处理对齐问题,因此即使设置为默认的 512 字节,也不会有问题
    # 查看块大小: mac中 : gstat -f ./a.txt ; linux中: stat -f ./a.txt
    # directio_alignment 4096;          # 4k

    # 当 Nginx 向客户端发送响应时,数据可能无法一次性传输完成(例如客户端网络较慢或响应体较大);
    # output_buffers 定义了内存中用于临时存储响应数据的缓冲区数量和大小,通过缓冲数据,Nginx 可以减少直接与客户端交互的频率,提升吞吐量
    # output_buffers 2 32k;               # 默认, 2块缓冲区, 每个 32KB, 总计 64KB 内存

    # 是针对单个连接的限速;限制客户端从服务器接收数据的速率;它不限制客户端上传或请求数据的速率; 如果客户端通过多线程或多连接下载,总速度可能超过限制;
    limit_rate 4m;                        # 限制传输速率为4MB每秒
    limit_rate_after 20m;                 # 前20兆不限速

    # max_ranges 用于限制 HTTP 请求中 Range 头允许的范围数量;如果没有限制, 某些恶意客户端可能发送大量 Range 请求,导致服务器性能下降
    # Range 请求头: 客户端通过 Range 头部请求部分内容,而不是整个文件;主要用于 断点续传 流媒体播放 等;
    # GET /video.mp4 HTTP/1.1  Range: bytes=0-1024,2048-4096; 表示客户端希望获取文件的两个部分: 0-1024 和 2048-4096 字节
    # 默认为 不限制 Range数量; 设置为0, 表示禁用所有 Range 请求, nginx会忽略 Range 头,客户端始终会收到完整文件响应;
    max_ranges 5;

    # 设置服务器向客户端发送响应数据时的超时时间; 它不是整个响应的时间的限制,而是两次写操作之间的超时时间, 如果客户端在这段时间内没有收到任何内容,则连接将关闭
    # Nginx 向客户端发送数据时, 如果客户端没有及时读取(如网络卡顿或客户端挂起),Nginx 会等待
    # 如果等待时间超过 send_timeout 的值,Nginx 会关闭连接,并记录日志
    send_timeout 60s;                     # 默认为60s

    # postpone_output 是一个用于控制响应数据缓冲行为的指令, 它决定了 Nginx 在接收到后端的响应后, 最小数据量达到多少时才会开始发送给客户端
    # Nginx 会等到从后端获取的响应数据量达到指定大小后才开始发送到客户端, 通过这种机制,可以减少小数据块频繁发送带来的开销,提高传输效率
    # tcp_nopush 是一个底层 TCP 协议栈级别 的设置,是针对传输层的优化, 作用在 Nginx 和操作系统的网络传输之间,
    # postpone_output是 Nginx 应用层 的配置,控制数据在发送到网络层之前的缓冲行为
    postpone_output 1460;                 # 默认为1460(通常是一个 TCP 包的大小),以字节为单位; 传输大文件: 设为: 4k 或 8k

    ######################################################################################

    location /{
        root html/files; # 更改为您的静态文件目录
        # 默认为html, 指定 autoindex 模块生成的目录列表的输出格式为 HTML,这个配置会使 autoindex 输出更友好和美观
        # 可选的还有 xml | json | jsonp
        autoindex_format html;
        # 启用目录自动索引功能,当用户请求的路径是一个目录,且该目录中没有默认的 index 文件时,autoindex 会生成一个目录列表页面,列出该目录下的文件和子目录
        # 如果没有启用 autoindex, 目录中没有 index 时, 目录 的请求通常会返回 403 Forbidden 错误
        autoindex on;
        # 显示文件的确切大小(以字节为单位),而不是使用更易读的格式(如 KB、MB 等)
        autoindex_exact_size on;
        # 显示文件的本地时间,而不是默认的 UTC 时间
        autoindex_localtime on;
        # 为以下文件添加attachment请求头,直接下载
        if ($request_filename ~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|html|js|css|jpg|jpef|png|gif|bmp|avi|mp4|mp3|wav|wmv|mpg|mpeg|swf|flv|ico)$){
            add_header  Content-Disposition attachment;
            # add_header  Content-Type application/octet-stream;
        }

        # 这是一个用于 Nginx 的 add_after_body 模块,它会在 HTTP 响应体的末尾插入指定的文件内容(自定义页面样式)
        add_after_body /.autoindex.html;
    }
}
