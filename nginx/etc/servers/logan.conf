#设定实际的服务器列表
upstream zp_server1{
    #加权轮询
    #weigth参数表示权值，权值越高被分配到的几率越大
    server 192.168.1.11:80   weight=5;
    server 192.168.1.12:80   weight=1;
    server 192.168.1.13:80   weight=6;
}

upstream bck_testing_01{
  #轮询
  #默认所有服务器权重为 1
  server 192.168.250.220:8080;
  server 192.168.250.221:8080;
  server 192.168.250.222:8080;
}
upstream bck_testing_02{
  #IP HASH
  ip_hash;
  # with default weight for all (weight=1)
  server 192.168.250.220:8080;
  server 192.168.250.221:8080;
  server 192.168.250.222:8080;
}

upstream bck_testing_03{
  #普通hash
  hash $request_uri;
  # with default weight for all (weight=1)
  server 192.168.250.220:8080;
  server 192.168.250.221:8080;
  server 192.168.250.222:8080;
}

server {
    listen       28080 ; #侦听80端口,并为默认服务,default_server只能有一个
    server_name  www.aaaa.xc.vip aaaa.xc.vip; #服务域名,可以有多个,用空格隔开
    # 编码格式
    #charset utf-8;

    #设定查看Nginx状态的地址
    location /nginx_status {
        stub_status           on; #开启就把注释打开
        access_log            /Users/logan/Logs/nginx/nginx_status_access.log;
        auth_basic            "NginxStatus";
        auth_basic_user_file  servers/passwd.txt; #htpasswd -c passwd.txt username
    }


    location /{
        proxy_pass http://127.0.0.1:8080; #代理本机8080端口服务
        #proxy_pass http://zp_server1;
        # 跨域
        include servers/others/enable-cors.conf;

        #以下是一些反向代理的配置(可选择性配置)
        proxy_set_header  Host              $http_host;   # required for docker client's sake
        proxy_set_header  X-Real-IP         $remote_addr;  #后端的Web服务器可以通过X-Real-IP获取用户真实IP
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;

        proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)
        proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)
        proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)
        proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小
        proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
        proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）
        proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传

        client_max_body_size 10m;          #允许客户端请求的最大单文件字节数
        client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数
    }

    #静态文件，nginx自己处理
    location ~ ^/(images|javascript|js|css|flash|media|static)/ {
        root /path/views;
        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。
        expires 30d;
    }

    #禁止访问 .htxxx 文件
    location ~ /\w+\.ht {
        deny all;
    }

    # 图片缓存时间设置
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
        expires 10d;
    }
    # JS和CSS缓存时间设置
    location ~ .*\.(js|css)?$ {
        expires 1h;
    }
    # 404定义错误提示页面
    #error_page 404             /404.html; #/etc/nginx/html/404.html
    # 500定义错误提示页面
    #error_page   500 502 503 504 /50x.html;

}

#HTTP服务器
#server {
#  #监听443端口。443为知名端口号，主要用于HTTPS协议
# listen       443 ssl;

#  #定义使用www.xx.com访问
#  server_name  www.helloworld.com;

#  #ssl证书文件位置(常见证书文件格式为：crt/pem)
#  ssl_certificate      cert.pem;
#  #ssl证书key位置
#  ssl_certificate_key  cert.key;

  #ssl配置参数（选择性配置）
#  ssl_session_cache    shared:SSL:1m;
# ssl_session_timeout  5m;
#  #数字签名，此处使用MD5
#  ssl_ciphers  HIGH:!aNULL:!MD5;
#  ssl_prefer_server_ciphers  on;

#  location / {
#      root   /root;
#      index  index.html index.htm;
#  }
#}


server {
    listen       28081;
    server_name  mark.aaaa.xc.vip;
    # 编码格式
    #charset utf-8;
    root html; #定义服务器的默认网站根目录位置
    index index.html; #定义index页面
    error_page    404         /index.html; #将404错误页面重定向到index.html可以解决history模式访问不到页面问题
    location ^~ /api/{
        proxy_pass http://127.0.0.1:7000;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        proxy_connect_timeout 1800;
        client_max_body_size 2048m;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header  Host              $http_host;   # required for docker client's sake
        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
    }
    location ^~ /auth/{
        proxy_pass http://127.0.0.1:7000;
        proxy_send_timeout 1800;
        proxy_read_timeout 1800;
        proxy_connect_timeout 1800;
        client_max_body_size 2048m;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header  Host              $http_host;   # required for docker client's sake
        proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
        proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
    }
}
