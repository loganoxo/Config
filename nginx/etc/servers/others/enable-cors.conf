# set $allowed_origin "*"; #允许所有域名
set $allowed_origin "";

# 检查来源是否在允许的域名列表中
if ($http_origin ~* ^(https://example1\.com|https://example2\.com|https://example3\.com)$) {
    set $allowed_origin $http_origin;
}

# 添加跨域相关的响应头
# Access-Control-Allow-Credentials 设置为 true 时,Access-Control-Allow-Origin 不能是通配符 *
add_header Access-Control-Allow-Origin $allowed_origin;
add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
add_header Access-Control-Allow-Credentials true; # 客户端可以在跨域请求中携带凭证,如登录状态的Cookie一起发送到服务器
add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
# Access-Control-Allow-Headers 跨域场景下,需要包含 浏览器允许发送的 非简单请求 的 自定义请求头
# 浏览器自动允许这些头字段,常见包括：
# Content-Type(值为 application/x-www-form-urlencoded, multipart/form-data, 或 text/plain);
# Accept、Origin、User-Agent
# 如果请求头包含了其他自定义的头(如 Authorization、X-Requested-With 等),或者 Content-Type 不属于上述三种类型(比如是 application/json),那么浏览器会认为这是 非简单请求,并发送一个预检请求(OPTIONS),预检请求会询问服务器是否允许这些头;
# 当 Content-Type 的值为 application/json、application/xml 等 非简单类型 时,浏览器会认为这不是简单请求,并触发预检请求;在这种情况下,服务器必须显式地通过 Access-Control-Allow-Headers 头告诉浏览器,它允许 Content-Type 作为请求头

# 处理预检请求
if ($request_method = "OPTIONS") {
    add_header Content-Length 0;
    add_header Content-Type text/plain;
    return 204; # 表示请求已成功处理,但响应体为空;对于预检请求,服务器会使用 204 来告知浏览器,响应是合法的,但没有具体内容返回
}

# OPTIONS 请求是跨域请求的预检请求,目的是询问目标服务器是否允许某些特定的头字段、方法等;在处理预检请求时,nginx 需要设置一些响应头以告知浏览器是否可以执行实际的跨域请求
# Access-Control-Allow-Headers 是一个关键的跨域响应头,它告诉浏览器当前请求中使用的哪些请求头是被允许的;因此,在处理 OPTIONS 请求时,我们必须返回这个头字段,表示哪些请求头可以被客户端发送

