# 检查来源是否在允许的域名列表中,浏览器只会在跨域请求中自动添加 Origin 头,如果是同源请求通常不会发送 Origin
# 如果没有匹配的,$allowed_origin依然为空字符串,add_header 'Access-Control-Allow-Origin' $allowed_origin; 就不会把header加入了
set $allowed_origin "";
# 匹配: http或https://logan.cors1或cors2.com或加端口号
if ($http_origin ~* ^https?://logan\.(cors1|cors2)\.com(:[0-9]+)?$) {
    set $allowed_origin $http_origin;
}
# set $allowed_origin "*"; #允许所有域名

# add_header必须放置在http、 server、 location 或 if in location(location中的if判断语句内) 块下
# 这个文件用了if,所以只能放在 location 下被include, 或者把 add_header 提取到 if 之外

# 处理预检请求
if ($request_method = 'OPTIONS') {
    # 预检请求的结果(例如允许的请求方法、请求头等)可以缓存 20 天,秒为单位
    # 在这 20 天内,浏览器不需要为相同的跨域请求再次发起预检请求
    add_header 'Access-Control-Max-Age' 1728000;

    # 表示请求已成功处理,但响应体为空;对于预检请求,服务器会使用 204 来告知浏览器,响应是合法的,但没有具体内容返回
    add_header 'Content-Type' 'text/plain; charset=utf-8';
    add_header 'Content-Length' 0;

    ## 预检请求中,以下这些header也是必须要加的
    add_header 'Access-Control-Allow-Origin' $allowed_origin;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    # 1、定义 允许跨域的 自定义头部
    # 2、还有 各种浏览器‘应该’能够处理但实际上无法完全支持的头部
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';

    return 204;
}

# 跨域的 post 和 get请求
if ($allowed_origin != "") {
    add_header 'Access-Control-Allow-Origin' $allowed_origin always;
    # Access-Control-Allow-Credentials: 客户端可以在跨域请求中携带凭证,如登录状态的Cookie一起发送到服务器
    # Access-Control-Allow-Credentials 设置为 true 时,Access-Control-Allow-Origin 不能是通配符 *
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    # 指定哪些响应头可以被浏览器的客户端 JavaScript 在跨域请求中访问(response.headers.get);默认只能访问简单请求头
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
}

# 没有 always：默认情况下,add_header 只会在 2xx 或 3xx 状态码的响应中生效。如果请求失败,或服务器返回错误（例如 404 或 500）,那么 add_header 指令不会生效,会导致看不到服务器具体的错误信息,只能看到跨域不成功的信息
# 使用 always：即使响应状态码不是 2xx 或 3xx（例如 404、500 或 301 等）,add_header 依然会添加相应的头部;

# 跨域场景下,当请求头为 简单请求头 时, 不会触发额外的预检请求, 常见 简单请求头 包括:
# 请求方法必须是: GET 或 POST 或 HEAD; 请求中不能携带 cookies 或 Authorization
# Content-Type(值为 application/x-www-form-urlencoded, multipart/form-data, 或 text/plain) 和 Accept、Accept-Language、Content-Language、和 浏览器自动添加的 Referer、Origin、User-Agent等

# 如果客户端请求的头部不在上述范围内,浏览器会触发预检请求,并需要服务器通过 Access-Control-Allow-Headers 明确声明允许的头部,确认服务器允许这些请求之后才会执行实际的请求
# 如果请求头包含了其他自定义的头(如 Authorization、X-Requested-With 等),或者 Content-Type 不属于上述三种类型(比如是 application/json) 或者  Content-Type 的值为 application/json、application/xml 等 非简单类型 时,那么浏览器会认为这是 非简单请求,并发送一个预检请求(OPTIONS),预检请求会询问服务器是否允许这些头,在服务器的响应中,必须通过 Access-Control-Allow-Headers 明确声明允许的头部,否则实际请求会被浏览器拦截,如果请求头中包含的头部没有在 Access-Control-Allow-Headers 中,预检请求会失败
