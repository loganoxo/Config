# 只允许本机访问 localhost:17999  127.0.0.1:17999  192.168.0.101:17999

server    {
    # 这个server可以拒绝:未配置的域名 localhost 局域网ip 127.0.0.1的访问, 只针对这个端口
    listen 17999 default_server;
    server_name _; # 匹配所有没有匹配到 server_name 的请求
    # 拒绝所有未配置的域名+localhost+局域网ip+127.0.0.1的访问
    return 403;
}

# 这个server可以: 允许本机使用局域网IP+127.0.0.1+localhost访问
# $remote_addr:这是指客户端(即发起请求的用户)的 IP 地址
# $server_addr:指 Nginx 服务器的 IP 地址,即 Nginx 服务器监听的地址(为局域网ip或127.0.0.1,取决于访问用的是ip还是域名)
server    {
    listen 17999;
    server_name localhost 127.0.0.1 192.168.0.101;
    charset utf-8;
    default_type text/plain;
    #access_log  logs/host.access.log  main;

    # 第一种方式;缺点不能使用return(包括location中的);return会一直通过;但是可以用location
    #        allow 127.0.0.1;     #允许本机用户通过127.0.0.1或localhost访问
    #        allow 192.168.0.101; #允许本机用户通过局域网ip访问
    #        deny all; #拒绝所有其他访问

    # 第二种方式,可以用return
    set $allow_access 0; #0为拒绝;1为通过
    # 检查是否为本机用户通过127.0.0.1或localhost访问
    if ($remote_addr = "127.0.0.1")    {
        set $allow_access 1;
    }

    # 检查是否为本机用户通过局域网ip访问
    if ($remote_addr = "192.168.0.101")    {
        set $allow_access 1;
    }

    # 允许局域网中其他设备的访问
    if ($remote_addr = "192.168.0.102")    {
        set $allow_access 1;
    }

    if ($allow_access = 0)    {
        return 403;
    }

    location /    {
        #确定根目录,html是相对于nginx的执行文件的目录;即/opt/homebrew/Cellar/nginx/1.27.3/html;这个目录被homebrew软链接到/opt/homebrew/var/www,我又把Data/Config/nginx/www软链接到了这个目录,所以这里的html实际上就是www
        root   html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html    {
        root   html;
    }
}
