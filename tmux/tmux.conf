# ------------------------------------------ Tmux Command ------------------------------------------
# https://tmuxcheatsheet.com/
# https://wangchujiang.com/reference/docs/tmux.html
# https://gist.github.com/MohamedAlaa/2961058

# tmux [new -s 会话名 -n 窗口名]                          启动新会话
# tmux at [-t 会话名]                                    恢复会话
# tmux ls                                               列出所有会话
# tmux kill-session -t 会话名                            关闭会话

# 在 Tmux 中, 按下 Tmux 前缀, 然后:
# t  显示一个数字时钟;          ?  列出所有快捷键(按q退出);              :  输入命令
# s  列出所有session;          d  退出当前会话(tmux 仍在后台运行);       $  重命名当前会话;
# w  列出所有窗口;              c  创建新窗口;                         n/p  后/前一个窗口;
# ,  重命名当前窗口;            &  关闭当前窗口                         f  查找窗口;
# %  垂直分割;                 "  水平分割;                           我改成了  | 垂直分割; -  水平分割
# o  选择下一个窗格;            x  关闭窗格;                           <space> 切换布局;
# z 切换窗格最大化/最小化;       0..9 按数字切换/选择窗口                  q 显示每个窗格是第几个,当数字出现的时候按数字几就选中第几个窗格
# ! 将窗格提升为一个新的窗口                                           <;>  切换最后一个活动窗格

# { 与上一个窗格交换位置;         } 与下一个窗格交换位置;
# ( 切换当前视角为上一个session;  ) 切换当前视角为下一个session
# [ 开启复制模式;                ] 粘贴tmux缓冲区(刚复制的内容)里的内容

# 按下 Tmux 前缀和一个冒号呼出命令提示行,输入下面的命令,用于同步当前窗口中的所有窗格的输入,你在一个窗格中的任何输入都会自动复制到其他窗格中
# 这个功能特别有用,比如你想在多台ssh连接的不同服务器中执行相同的命令,那么就可以先在本地开一个tmux,然后分割pane,每个pane都用ssh连接不同的服务器
# 然后用 prefix + C-t 开启同步, 然后在A窗格中输入字符,在其他窗格中都会实时的同步,回车执行命令,也是同步进行的
# 只针对于当前窗口的所有窗格, 对于其他当前session的窗口 和 其他session 的窗口 是不会同步的
# :setw synchronize-panes on

# ------------------------------------------ Tmux Config ------------------------------------------
# bind 为 bind-key 的缩写; set为set-option的缩写; setw 为 set-window-option 的缩写
# bind -r                                                   repeatable 的缩写,让绑定的快捷键在按住不放时可以重复触发
# bind -n                                                   绑定不需要前缀键的快捷键
# tmux list-keys | grep C-a                                 检查按键 C-a 是否被绑定
# tmux list-keys | grep -iE "^bind-key\s+-T\s+prefix\s+s\b" 检查按键 prefix + s 是否被绑定
# tmux source-file ~/.tmux.conf                             重新加载配置文件
# set -g                                                    -g: 全局设置，影响所有会话，推荐用于通用配置; 不加 -g: 仅影响当前会话

# ------------------------------------------ prefix ------------------------------------------
# 绑定Ctrl+s为新的指令前缀; 值得注意: C-s在我的vim中配置为保存当前文件; 插件tmux-resurrect的默认快捷键为 prefix + C-s
set -g prefix C-s
# C-b即Ctrl+b键，unbind意味着解除绑定
unbind C-b
# 例如,当前缀键为 C-a 时,这个键默认会被tmux捕获,终端默认的用C-a回到行首的功能就使用不了
# send-prefix 的作用就是将 前缀键本身直接发给当前窗口中的程序, 让程序能够正确处理
# 所以双击 C-a, 就能让终端回到行首 或者 触发当前终端正在前台使用的程序的某个功能
bind C-s send-prefix

# 从tmux v1.6版起，支持设置第二个指令前缀
# set-option -g prefix2 ` # 设置一个不常用的`键作为指令前缀，按键更快些

# ------------------------------------------ 功能配置 ------------------------------------------
# 开启256颜色支持,
# tmux-256color 是专门为 tmux 设计的配置;改善了一些程序在 tmux 中运行时的兼容性问题
set -g default-terminal tmux-256color
# xterm-256color常见于现代终端模拟器,它的终端功能更丰富，支持更广泛的应用,如鼠标支持、更多键绑定
# set -g default-terminal "xterm-256color"
# screen-256color 更加兼容旧的终端环境,功能比 xterm-256color 略有限,但更保守和稳定
# set -g default-terminal "screen-256color"

# 开启鼠标支持 v2.1及以上的版本
set -g mouse on

# 修改iterm2的标题
set -g set-titles on
set -g set-titles-string "tmux - #{session_name} - #{host}"

# 设置 tmux 窗口的编号起始值为 1
set -g base-index 1
# 设置 tmux 窗格(pane)的编号起始值为 1
set -g pane-base-index 1
# 取消 "关掉某个窗口后，窗口编号会按照顺序重新设置" 的功能
set -g renumber-windows off

# 允许tmux自动根据当前窗口运行的命令重命名窗口
setw -g automatic-rename  on
# 禁止活动进程通过转义序列修改窗口名
setw -g allow-rename off

# prefix + q 显示编号的驻留时长,单位 ms
set -g display-panes-time 10000

# 单位 ms,默认为 500毫秒; bind -r 的快捷键重复的超时时间
# 不是prefix和之后的按键之间的时间;如 bind -r a <command>;是按下prefix后,连续按 a 键,每个a键之间的超时时间
set -g repeat-time 2000

# tmux 会在你没有聚焦某个窗口(不是窗格)时,监控该窗口是否有新的输出,会有一个响铃
setw -g monitor-activity on
# 当窗口(不是窗格)中的输出发生变化时,tmux 会在状态栏显示一个消息,而不是用 monitor-activity 的响铃;除非on换成both,会同时输出响铃和消息
set -g visual-activity on

# ------------------------------------------ 键盘映射 ------------------------------------------
# 保持默认的快捷键的键位不变,但是功能加强
# 默认的快捷键就是这样的,我只是加了 -r
# { 与上一个窗格交换位置;         } 与下一个窗格交换位置;
# ( 切换当前视角为上一个session;  ) 切换当前视角为下一个session
bind -r "{" swap-pane -U
bind -r "}" swap-pane -D
bind -r "(" switch-client -p
bind -r ")" switch-client -n

# 切换窗口,在默认的快捷键基础上 加了 -r,能连续按
bind -r C-p previous-window
bind -r p previous-window
bind -r C-n next-window
bind -r n next-window

# 新增窗口时,保持目录不变
bind-key "c" new-window -c "#{pane_current_path}"

# 分屏,保留默认的,但是增加保持目录的功能
bind-key "%" split-window -h -c "#{pane_current_path}"
bind-key '"' split-window -v -c "#{pane_current_path}"

# 切换到上一个活动窗格,加了 -r
bind -r ";" last-pane

# 保留 prefix+<space> 的切换布局的功能 加了 -r
bind -r Space next-layout

# 使 Yazi 的图像预览能够在 tmux 中正常工作,但是我不这样设置也可以吸纳事图片预览,所以先注释吧
# set -g allow-passthrough on
# set -ga update-environment TERM
# set -ga update-environment TERM_PROGRAM

# ------------------------------------------ 新增的快捷键

# 将当前窗格分离并提升为一个新的窗口并切换到该窗口
# bind-key W break-pane  # 用默认的 prefix+! 吧

# 添加载在配置文件指令为： prefix + R
bind C-r source-file ~/.tmux.conf \; display-message "Config reloaded.."

# 同步(不同步)当前窗口中的所有窗格的输入,你在一个窗格中的任何输入都会自动复制到其他窗格中
# 这个功能特别有用,比如你想在多台ssh连接的不同服务器中执行相同的命令,那么就可以先在本地开一个tmux,然后分割pane,每个pane都用ssh连接不同的服务器
# 然后用 prefix + C-t 开启同步, 然后在A窗格中输入字符,在其他窗格中都会实时的同步,回车执行命令,也是同步进行的
# 只针对于当前窗口的所有窗格, 对于其他当前session的窗口 和 其他session 的窗口 是不会同步的
bind C-t setw synchronize-panes

# 这个命令会将当前窗口内的所有窗格重新排列成网格状,tiled 布局会将多个窗格排列成一个尽可能等宽等高的网格,可以根据窗格数量自动调整布局
# bind Space select-layout tiled
# 保留 prefix+<space> 的切换布局的功能,还是别写死了,还是挺有用的
bind Enter select-layout tiled

# 切换到上一个活动窗口
bind -r C-e last

# 窗口(不是窗格)交换
# prefix + <                            将当前窗口向左移动一位
# prefix + >                            将当前窗口向右移动一位
bind-key -r "<" swap-window -d -t -1
bind-key -r ">" swap-window -d -t +1

# 切换窗口,不需要 prefix ; M 为 option 或 alt 键
bind -n M-0 next-window
bind -n M-9 previous-window

# 窗格(pane)选择
# prefix + h/j/k/l                 选择 左/下/上/右 侧的窗格
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# 分割窗格
# prefix + |                            将当前窗格分成 左右 两部分
# prefix + -                            将当前窗格分为 上下 两部分
# prefix + \                            在右侧开启一个 终端宽度/2 终端全高 的新窗格
# prefix + _                            在下方开启一个 终端高度/2 终端全宽 的新窗格
bind-key "|" split-window -h -c "#{pane_current_path}"
bind-key "\\" split-window -fh -c "#{pane_current_path}"
bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key "_" split-window -fv -c "#{pane_current_path}"

# 窗格(pane)选择 (不用prefix); 并且增加了与vim的配合,在vim中安装vim-tmux-navigator插件
# See: https://github.com/christoomey/vim-tmux-navigator
# <ctrl-h/j/k/l>    选择 左/下/上/右 侧的窗格(或者vim的分屏);
# <ctrl-\>          切换到上一个活动窗格(或者vim的分屏)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
#tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ $(echo $(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p") "<" 3.0 | bc) = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ $(echo $(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p") ">=" 3.0 | bc) = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
# 提供备用映射
bind C-l send-keys 'C-l'
bind C-\\ send-keys 'C-\'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# 调整窗格大小的快捷键(不用prefix); 然后 可以用 prefix + <key> 使用这些键原有的功能(如果有的话)
# 向上增加窗格大小
bind -n C-Up    resize-pane -U 5
bind -r C-Up send-keys 'C-Up'
## 向下增加窗格大小
bind -n C-Down  resize-pane -D 5
bind -r C-Down send-keys 'C-Down'
## 向左增加窗格大小,冲突,需要修改mac上移动space的快捷键
bind -n C-Left  resize-pane -L 5
bind -r C-Left send-keys 'C-Left'
## 向右增加窗格大小,冲突,需要修改mac上移动space的快捷键
bind -n C-Right resize-pane -R 5
bind -r C-Right send-keys 'C-Right'
# 需要prefix
bind-key -r H resize-pane -L 2
bind-key -r J resize-pane -D 2
bind-key -r K resize-pane -U 2
bind-key -r L resize-pane -R 2

###### 插件 tmux-sensible 添加的快捷键
# prefix + s        在最后一个活动窗口之间切换(当prefix是C-s时); 当prefix是C-a时,这个快捷键会自动变为 prefix+a, 以此类推
# 但是与 prefix + s 默认的显示所有session的功能冲突,所以tmux-sensible不会绑定这个了

# ------------------------------------------ 默认外观(没有安装主题时的样式) ------------------------------------------
#set -g status-left "#[bg=#FF661D] 🐶 #S " # 状态栏左侧内容
#
#set -g status-interval 1 # 状态栏刷新时间
#set -g status-justify left # 状态栏列表左对齐
#setw -g monitor-activity on # 非当前窗口有内容更新时在状态栏通知
#
#set -g status-bg black # 设置状态栏背景黑色
#set -g status-fg yellow # 设置状态栏前景黄色
#set -g status-style "bg=black, fg=yellow" # 状态栏前景背景色
#
#set -g status-left-length 300 # 状态栏左边长度300
#set -g status-right-length 500 # 状态栏左边长度500
#set -g status-right 'Continuum status: #{continuum_status}'
#set -wg window-status-format " #I #W " # 状态栏窗口名称格式
#set -wg window-status-current-format " #I:#W#F " # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
#set -wg window-status-separator "   " # 状态栏窗口名称之间的间隔
#set -wg window-status-current-style "bg=red" # 状态栏当前窗口名称的样式
#set -wg window-status-last-style "fg=red" # 状态栏最后一个窗口名称的样式

# ------------------------------------------ 复制粘贴 ------------------------------------------
# 进入复制模式 快捷键：prefix + [ ; 退出: enter 或者 q
# 设置 tmux 中复制模式 为 vi 风格 ; 默认为 emacs 模式
setw -g mode-keys vi # 开启vi风格后,支持vi的C-d、C-u、hjkl等快捷键

# 绑定esc键为进入复制模式,使用默认的 prefix + [
# bind Escape copy-mode

# 开启vim模式后,v和y还是不能使用,需要手动配置按键
# 新版本：
bind -T copy-mode-vi v send -X begin-selection # 开始复制
bind -T copy-mode-vi y send -X copy-selection # 复制剪切板
# bind p pasteb # 绑定p键为粘贴文本（p键默认用于进入上一个窗口，不建议覆盖）
# 旧版本：
# bind -t vi-copy v begin-selection  # 绑定v键为开始选择文本
# bind -t vi-copy y copy-selection # 绑定y键为复制选中文本

# 和系统剪切板互通,需要终端支持;默认为 external;更彻底的有 on ;  还有个 off: 不同步剪切板
set -g set-clipboard external

# ------------------------------------------ 插件 ------------------------------------------
# List of plugins
# 插件管理
set -g @plugin 'tmux-plugins/tpm'
# tmux环境备份和恢复
set -g @plugin 'loganoxo/tmux-resurrect'
# 自动备份和恢复
set -g @plugin 'loganoxo/tmux-continuum'
# 好用的设置
set -g @plugin 'loganoxo/tmux-sensible'
# 用 fzf 管理 tmux; 默认快捷键为 prefix + shift + f
set -g @plugin 'sainnhe/tmux-fzf'
# dracula主题
set -g @plugin 'dracula/tmux'

# ------------------------  tmux-resurrect  ---------------------------
# 默认情况下，tmux-resurrect 把 tmux 环境保存到 ~/.tmux/resurrect 目录中的文件中;可以通过下面这个配置修改,仅允许使用 $HOME, $HOSTNAME, and ~
# set -g @resurrect-dir '/some/path'
# 更改tmux-resurrect的默认键绑定,C-s为prefix,冲突了;设为 <S> 大写的
set -g @resurrect-save 'S'
# C-r 会恢复最新保存的内容; 如果要恢复其他时间点的内容: cd ~/.tmux/resurrect/ ; ln -sf <file_name> last ; prefix + Ctrl-r
set -g @resurrect-restore 'R'
# 开启恢复 小窗格 的内容的功能
set -g @resurrect-capture-pane-contents 'on'
# 恢复shell的历史记录,功能已弃用
# set -g @resurrect-save-shell-history 'on'
# tmux-resurrect 默认只会保存和恢复一小部分程序:vi vim nvim emacs man less more tail top htop irssi weechat mutt,可以用下面这个命令添加
# 但是tmux-resurrect的本质是记录命令到文件,然后恢复时重新执行,当恢复的命令是有状态的,可能导致重复执行导致错误
# set -g @resurrect-processes 'ssh'

# ------------------------  tmux-continuum  ---------------------------
# 单位为分钟; Continuum默认每隔15mins备份一次
set -g @continuum-save-interval '60'
# set -g @continuum-save-interval '0' #关闭自动备份
# set -g @continuum-restore 'on' # 启用自动恢复
# Tmux Continuum提供了一个查看运行状态的插值
# set -g status-right 'Continuum status: #{continuum_status}'
# 在Terminal 或者 iTerm2 中自动全屏启用tmux
# set -g @continuum-boot 'on'

# ------------------------  fzf  ---------------------------
# fzf 窗口大小
TMUX_FZF_OPTIONS="-p -w 80% -h 90% -m --preview-window hidden"
# 默认启用预览,不启用设为0
TMUX_FZF_PREVIEW=0
# 1: 显示中包含当前窗口或窗格,默认不包含;打开注释后设置为0或1都会包含
# TMUX_FZF_SWITCH_CURRENT=1
# 预览窗口默认将尝试“跟随”内容,就是显示窗口的最后的内容,取消
TMUX_FZF_PREVIEW_FOLLOW=0
# 设置要显示的功能和顺序
TMUX_FZF_ORDER="menu|session|window|pane|command|keybinding|clipboard|process"

# 自定义菜单命令 (menu选项)
TMUX_FZF_MENU=\
"同步(不同步)当前窗口的所有pane(prefix+C+t)\ntmux setw synchronize-panes\n"\
"重新布局当前窗口所有pane的宽高(prefix+Space)\ntmux select-layout tiled\n"\
"test\necho 'Hello test!'\n"


# ------------------------  dracula  ---------------------------
# 加载dracula主题的插件,如continuum如果不加载,后面配置的set -g @dracula-continuum-mode countdown也不会显示
set -g @dracula-plugins "cwd attached-clients network synchronize-panes ssh-session cpu-usage ram-usage continuum"

# 启用窗口标志
set -g @dracula-show-flags true
# 调整状态栏的刷新率,默认为5
set -g @dracula-refresh-rate 5
# 启用高对比度窗格边框
set -g @dracula-border-contrast true
# 隐藏空插件
set -g @dracula-show-empty-plugins false
# 启用powerline符号
set -g @dracula-show-powerline true
#set -g @dracula-show-left-sep 
set -g @dracula-show-right-sep 
#set -g @dracula-show-right-sep 
#set -g @dracula-show-left-sep 

# 左侧图标
set -g @dracula-show-left-icon "🐶 #h | #S"
# default is 1, it can accept any number and 0 disables padding.
set -g @dracula-left-icon-padding 1

# 显示下一次保存的倒计时
set -g @dracula-continuum-mode countdown

# cpu 标签    󰍛 󰘚 󰻟 󰻠
set -g @dracula-cpu-usage-label " "
# 内存 标签    󰍛 󰘚
set -g @dracula-ram-usage-label " "

# ping 查看网络是否畅通
set -g @dracula-network-hosts "1.1.1.1 8.8.8.8"
set -g @dracula-network-ethernet-label "󰒪 Eth"
set -g @dracula-network-offline-label "󰖪 "
set -g @dracula-network-wifi-label " "
#ethernet: 󰈀 󰒪 󰒍 󰌗 󰌘
#offline: 󰖪  󱍢
#wifi:      󰖩  󰘊 󰒢

# ssh 当未通过 ssh 连接时不输出任何内容(在本地tmux中用ssh命令连接服务器的时候才显示;如果先ssh连接远程服务器,然后在远程服务器中使用tmux,那是不显示的)
set -g @dracula-show-ssh-only-when-connected true

# 显示是否正在使用tmux的窗格同步功能,这里是设置标签
set -g @dracula-synchronize-panes-label "󰓦 "

# 设置要显示的最小客户端数量
set -g @dracula-clients-minimum 2
set -g @dracula-clients-singular client
set -g @dracula-clients-plural clients

# 调色板
set -g @dracula-colors "
# Dracula Color Pallette
white='#f8f8f2'
gray='#44475a'
dark_gray='#282a36'
light_purple='#D63484'
dark_purple='#6272a4'
cyan='#8be9fd'
green='#A1D6CB'
orange='#FC8F54'
red='#ff5555'
pink='#FB9EC6'
yellow='#f1fa8c'
light_blue='#9DBDFF'
light_orange='#FFCF96'
light_red='#FF8989'
my_purple='#bd93f9'
"
set -g @dracula-ram-usage-colors "my_purple dark_gray"
set -g @dracula-cpu-usage-colors "pink dark_gray"
set -g @dracula-cwd-colors "yellow dark_gray"
set -g @dracula-synchronize-panes-colors "light_orange dark_gray"
set -g @dracula-continuum-colors "light_blue dark_gray"
set -g @dracula-attached-clients-colors "light_red dark_gray"

# ------------------------  catppuccin主题  ---------------------------
# catppuccin要手动安装 ; TPM 存在一些名称冲突问题,因为 catppuccin 和 dracula 的主题下载下来的文件夹都是 tmux
# mkdir -p ~/.config/tmux/plugins/catppuccin
# git clone -b v2.1.2 https://github.com/catppuccin/tmux.git ~/.config/tmux/plugins/catppuccin/tmux

# Configure the catppuccin plugin
# set -g @catppuccin_flavor "mocha"
# set -g @catppuccin_window_status_style "rounded"

# Load catppuccin
#run ~/.config/tmux/plugins/catppuccin/tmux/catppuccin.tmux
# For TPM, instead use `run ~/.config/tmux/plugins/tmux/catppuccin.tmux`

# Make the status line pretty and add some modules
#set -g status-right-length 100
#set -g status-left-length 100
#set -g status-left ""
#set -g status-right "#{E:@catppuccin_status_application}"
#set -agF status-right "#{E:@catppuccin_status_cpu}"
#set -ag status-right "#{E:@catppuccin_status_session}"
#set -ag status-right "#{E:@catppuccin_status_uptime}"
#set -agF status-right "#{E:@catppuccin_status_battery}"

# ------------------------------------------ End ------------------------------------------
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# ~/.tmux/plugins/tpm/bin/install_plugins
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# prefix + I                安装插件
# prefix + U                升级插件
# prefix + alt + u          卸载不在插件列表中的插件
run '~/.tmux/plugins/tpm/tpm'


# ------------------------  防止被覆盖  ---------------------------
# 设置普通消息的样式
set-option -g message-style "fg=#FF748B,bg=#3C4048,bold"
# 设置命令消息的样式
set-option -g message-command-style "fg=#FF748B,bg=#3C4048,bold"

# 设置flag颜色,默认的dracula颜色太浅了
flags="#{?window_flags,#[fg=#D63484 bold]#{window_flags},}"
set-window-option -g window-status-format "#[fg=#f8f8f2]#[bg=#44475a] #I #W${flags}"
set-window-option -g window-status-activity-style "bold"
set-window-option -g window-status-bell-style "bold"
