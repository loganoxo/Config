"----------------- TextObject语法 和  motion语法 -----------------
" Text object:  文本对象,表示当前光标位置向两边扩展的选区,重要的是截止在哪里
" gciw              注释一个单词,使用Text object语法;
" gci{              注释当前光标所在位置两边的{}之间的所有内容

" motion:       表示从光标位置,到下一个位置之间的选区,重要的是下个位置
" gc{motion}        如gcf调用easymotion找到光标终点; gc$ 注释到行尾; gcj/k:注释到下/上一行; gcG 注释到文件结尾; 等

"一些常见的 motion 命令
"h：向左移动一个字符  j：向下移动一行 k：向上移动一行  l：向右移动一个字符
"w：移动到下一个单词的开头  b：移动到当前或前一个单词的开头  e：移动到当前或下一个单词的末尾  ge：移动到前一个单词的末尾
"行内移动
"0：移动到行  ^：移动到本行第一个非空字   $：移动到行尾
"文件范围的移动
"gg：移动到文件的开头  G：移动到文件的结尾  nG：移动到第 n 行  H：移动到屏幕顶部  M：移动到屏幕中间  L：移动到屏幕底部
"搜索
"f{char}：在当前行向右移动到下一个 {char}  t{char}：在当前行向右移动到 {char} 之前
"F{char}：在当前行向左移动到上一个 {char}  T{char}：在当前行向左移动到 {char} 之后
"/pattern：向前搜索 pattern  ?pattern：向后搜索 pattern
"n：重复上一个搜索  N：反向重复上一个搜索
"块和段落移动
"{：移动到当前段落的开头  }：移动到下一个段落的开头
"(：移动到当前句子的开头  )：移动到下一个句子的开头

"一些常见的 Text object 命令
"文本对象通常在 Visual 模式或操作命令中使用，如 d、c、y 等：
"
"iw：当前单词
"aw：一个单词及其后面的空格
"is：当前句子
"as：一个句子及其后面的空格
"ip：当前段落
"ap：一个段落及其后面的空行
"it：当前 HTML/XML 标签内部
"at：当前 HTML/XML 标签及其内容


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 操作备忘录
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 0、vim -u NONE <file> , 不加载vimrc的配置打开vim, 测试干净环境下的vim
" 1、删除（不剪切），不将其剪切内容放入默认寄存器，而是直接丢进黑洞寄存器
" <press==> "_dd
" 2、放到无名寄存器(")(vim默认的),在vim默认寄存器为系统剪切板时有用,不复制到系统剪切板,但是还能通过""p找回
" <press==> ""dd
" 3、删除并进入插入模式: s===cl===dli
" 4、* : 向后搜索光标所在的单词并居中显示结果; # : 向前搜索光标所在的单词并居中显示结果
" 5、插入模式,<Ctrl-o>,临时执行一个普通模式命令，然后自动返回插入模式
" 6、gv 重选上次的选区
" 7、J 将多行合并为一行,行与行之间会加空格; gJ  将多行合并为一行，行与行之间不加空格
" 8、在一些情况下,normal模式使用不了,如:tab terminal ; 可以用: <C-w>N 或者 <C-\><C-n> 切回normal模式
" 9、插入上一次插入的文本(i文本`esc`a`C-a`)
" 10、用<.>键可以重复上次的命令(编辑)
" 11、选区上下移动 :<C-u>'<,'>m '>+1<CR>gv   整体向下移动一行;   :<C-u>'<,'>m '<-2<CR>gv   整体向上移动一行
" 12、g' g` 标签跳转时的反引号和引号命令,前面加上g,可以不改变jumplist,即不改变跳转列表的顺序和位置
" 13、:h[elp] cursorcolumn 查看文档; :set cursorcolumn? 查看当前环境的某项配置的值
" 14、:verbose set cursorcolumn? 查看当前环境的某项配置的值,更详细,看到是在哪里被定义修改的
" 15、:map <C-c>  :imap <C-c> :verbose map <C-c>  :verbose imap <C-c>  查看按键映射;
" 16、:echo hasmapto('<Plug>Sneak_S', 'v')  执行某个函数并打印值,hasmapto是vim自带的检查映射的函数;
" 17、:call fun()  执行某个函数


"----------------- 代码折叠命令 -----------------
"                   ( close==创建折叠 )!= (open==展开折叠)
"       za         切换当前光标下的折叠的状态(open或close) == zc+zo
"       zA         递归切换当前折叠及其嵌套折叠的状态 == zC+zO
"       zr         减少折叠级别
"       zm         增加折叠级别
"       zj         定位到下一个折叠处
"       zk         定位到上一个折叠处
"
"       zc         创建一个光标下的折叠(close)(从内向外)
"       zC         递归创建折叠及嵌套折叠(从内向外)
"       zo         展开一个光标下的折叠(open)(从外向内)
"       zO         递归打开当前折叠及其嵌套折叠,大写的字母O (从外向内)
"       zf         对所指定的文本范围进行折叠,只支持manual和marker

"}}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  宏命令
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"----------------------------------
" A. 常规使用宏的流程：
"   1. q 进入宏录制 + 寄存器字母(a-z)
"   2. 录制宏内容
"   3. q 退出宏录制
"   4. @a-z 使用字母指定的宏
"   5. @@ 重复最近使用过宏
" -------------------------------------------------------------------------------
"

"=========================================END=========================================
