"$schema" = 'https://starship.rs/config-schema.json'

format = """
$os\
$directory\
$git_branch\
$git_status\
$fill\
$status\
$cmd_duration\
$java\
$python\
$conda\
$nodejs\
$c\
$bun\
$dotnet\
$deno\
$sudo\
$time\
$shell\
$username\
$hostname \
$line_break\
$character\
"""
# $aws\

scan_timeout = 30 #Starship扫描当前目录下文件(不会扫描子目录内的文件)的超时时间; 单位为毫秒; 默认为30ms
command_timeout = 1000 #Starship执行命令(如获取java版本等)的超时;单位为毫秒; 默认为500ms
add_newline = false

# palette = '' #使用默认颜色

[os]
format = '[$symbol ]($style)'
style = 'bold white'
disabled = true

[os.symbols]
Alpine = ''
Amazon = ''
Android = ''
Arch = ''
CentOS = ''
Debian = ''
EndeavourOS = ''
Fedora = ''
FreeBSD = ''
Garuda = ''
Gentoo = ''
Linux = ''
Macos = ''
Manjaro = ''
Mariner = ''
Mint = ''
NetBSD = ''
NixOS = ''
OpenBSD = ''
OpenCloudOS = ''
openEuler = ''
openSUSE = ''
OracleLinux = '⊂⊃'
Pop = ''
Raspbian = ''
Redhat = ''
RedHatEnterprise = ''
Solus = ''
SUSE = ''
Ubuntu = ''
Unknown = ''
Windows = ''

[directory]
#   📂 |
format = '[$path]($style)[$read_only]($read_only_style) '
style = 'bold cyan'
read_only_style = 'red'
home_symbol = "~"
truncation_symbol = '…/'
truncation_length = 3
read_only = ':ro'
use_os_path_sep = true
#fish_style_pwd_dir_length = 1 #全路径显示;但是truncation_length之前的父目录只用一个首字母代替
truncate_to_repo = true #当当前目录离项目仓库主目录层级小于truncation_length时,只显示到仓库主目录


[git_branch]
format = """
on [$symbol$branch]($style)\
[(:$remote_name/$remote_branch)]($style)\
"""
#               |
symbol = ''
style = 'bold purple'
always_show_remote = false
disabled = false

[git_status]
format = '([\[$all_status$ahead_behind\]]($style)) '
style = 'bold red'
# untracked:'?'; staged:'+'; modified:'!'; deleted:'x';
#windows_starship = '/mnt/c/Users/username/scoop/apps/starship/current/starship.exe' # windows上的WSL环境下开启增加性能

[fill]
symbol = ' '
style = 'bright-black'
disabled = false

[status]
# '[\[$symbol$common_meaning$signal_name$maybe_int\]]($style) '
format = '$symbol'
symbol = '[x\($status\)](bright-red) ' #程序错误时显示的符号
success_symbol = '[v](green) '
not_executable_symbol = '[x\($status\)](bright-red) ' #文件不可执行时显示的符号
not_found_symbol = '[x\($status\)](bright-red) ' #找不到命令时显示的符号
sigint_symbol = '[x\($status\)](bright-red) ' #SIGINT 上显示的符号 (Ctrl + c)
signal_symbol = '[x\($status\)](bright-red) ' # 任何信号上显示的符号
recognize_signal_code = true #根据退出码区分命令的退出是因为正常执行还是被信号终止,比如:退出码 130：一般表示进程被 SIGINT (Ctrl+C) 终止
map_symbol = true #启用退出代码的符号映射(控制 除了symbol和success_symbol 之外的符号)
disabled = false

[cmd_duration] #        |
format = '[\[$duration\]]($style) '
style = 'bold yellow'
min_time = 2000 #毫秒,超过这个时间才会显示
show_milliseconds = false #除了秒数之外,还显示毫秒数

[java]
# ⚰︎ ♲ ⇞ ⚕︎ ☥ º                                 |
format = '[${symbol}(${version} )]($style)'
symbol = 'Java'
style = 'bright-purple'
detect_extensions = ['java', 'class', 'gradle', 'jar', 'cljs', 'cljc']
detect_files = ['pom.xml', 'build.gradle.kts', 'build.sbt', '.java-version', 'deps.edn', 'project.clj', 'build.boot', '.sdkmanrc']
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = false

[python]
format = '[${symbol}${pyenv_prefix}(${version})(\($virtualenv\))]($style) '
symbol = 'PY' # 󰌠  🐍 👾  |
style = 'bright-purple'
#detect_files = [['.python-version', 'Pipfile', '__init__.py', 'pyproject.toml', 'requirements.txt', 'setup.py', 'tox.ini', 'pixi.toml']] #默认值
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = false

[conda]
format = '[$symbol\($environment\)]($style) '
symbol = 'Conda' # 󰌠  🐍 👾  |
style = 'bright-purple'
truncation_length = 1 #默认为1;如果环境是通过conda create -p [path]创建的，则环境路径应截断为的目录数。 0表示不截断
ignore_base = true #默认为true; 激活时忽略base环境
disabled = false

[nodejs]
format = '[$symbol($version)]($style) '
symbol = 'Node'
style = 'bright-purple'
#detect_extensions = [] #默认为['js', 'mjs', 'cjs', 'ts', 'mts', 'cts'],目录下但凡有这些后缀名的文件则激活
detect_files = ['package.json', '.node-version', '.nvmrc']
detect_folders = ['node_modules']
not_capable_style = 'red'
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = false

[c]
format = '[$symbol]($style)[$version(\($name\))]($style) '
symbol = 'C' #    |
style = 'bright-purple'
detect_extensions = ['c', 'h']
#commands = [['cc', '--version'], ['gcc', '--version'], ['clang', '--version']] # 获取编译器版本(名字)的命令和查找顺序
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = false

[bun]
format = '[$symbol($version)]($style) '
symbol = 'Bun'
style = 'bright-purple'
detect_files = ['bun.lockb', 'bunfig.toml']
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = true
# 您可以在配置中覆盖nodejs 模块的detect_files属性，以便仅显示bun运行时:
# [nodejs]
# detect_files = ['package.json', '.node-version', '!bunfig.toml', '!bun.lockb']

[dotnet]
format = '[$symbol($version)(\($tfm\))]($style) '
symbol = '.NET'
style = 'bright-purple'
detect_extensions = ['csproj', 'fsproj', 'xproj']
detect_files = ['global.json', 'project.json', 'Directory.Build.props', 'Directory.Build.targets', 'Packages.props']
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = true

[deno]
format = '[$symbol($version)]($style) '
symbol = 'Deno'
style = 'bright-purple'
detect_files = ['deno.json', 'deno.jsonc', 'deno.lock', 'mod.ts', 'mod.js', 'deps.ts', 'deps.js']
version_format = '${major}.${minor}' # raw:完整版本号(1.2.3); major:主版本号(1); minor:次版本号(2); patch:补丁版本号(3)
disabled = true

[aws]
# 'on [$symbol($profile )(\($region\) )(\[$duration\] )]($style)'
format = '[$symbol](bold green)[( $profile)]($style) '
symbol = 'aws '
style = 'bright-purple'
disabled = true

[sudo]
format = '[\[$symbol\]]($style) '
symbol = 'sudo'
style = 'bold yellow'
allow_windows = false #由于 Windows 没有默认的 sudo,因此默认被禁用
disabled = false

[time]
#  🕙                  |
format = '[$time]($style) '
style = 'bold bright-cyan'
time_format = '%H:%M'
use_12hr = false #12小时制
disabled = false

[shell] #      _ |
format = '[$indicator]($style) '
style = 'bold bright-blue'
unknown_indicator = 'shell'
powershell_indicator = 'powershell'
fish_indicator = 'fish'
bash_indicator = 'bash'
zsh_indicator = 'zsh'
disabled = false

[username]
#[⎪](fg:light_orange bg:box)\
#           |
format = '[$user]($style)'
style_user = 'bold yellow'
style_root = 'bold red'
show_always = true

[hostname]
format = '[([@]($style)$hostname)](bold bright-cyan)' # '[$ssh_symbol](bold blue) on [$hostname](bold red) '
ssh_symbol = '🌐 ' #   |
style = 'bold green'
ssh_only = true #仅在连接到 SSH 会话时显示主机名
trim_at = '' #第一个匹配之后主机名被截断的字符串; '.'将在第一个点后停止; ''将禁用任何截断
aliases = { "loganmac.local" = "mac" } #将主机名替换为昵称
# detect_env_vars = ['!TMUX', 'SSH_CONNECTION'] #隐藏远程 tmux 会话中的主机名
disabled = false

[character]
format = '$symbol '
#success_symbol = '[](fg:bold light_green)'
#success_symbol = '[☍](fg:bold light_green)'
#success_symbol = '[☡](fg:bold light_green)'
success_symbol = '[>](bold green)'
error_symbol = '[x](bold red)'
vimcmd_symbol = '[V](bold green)'
